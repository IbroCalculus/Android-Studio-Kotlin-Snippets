
ViewModel class is a part of android architecture components.
The viewmodel class is designed to store and manage UI related data in a lifecycle-conscious way.
The ViewModel classs allows data to survive configuration changes, ie screen rotation.

Android architecture components are a collection of libraries that help developers design clean, robust and maintainable applications.
They contains classes for managing UI Components lifecycle as well as handling data persistence.

When screen orientation is changed, activity reloads, hence resetting whatever was in progress.
More like changing keyboard, language settings, enable multi-window mode etc cause this..



=================== BEFORE ViewModel ===============
//Changing the orientation will reset any changes, or restart the activity, hence loosing changes.
// NB: I decide to use viewBinding.

    private lateinit var binding: ActivityMainBinding
    private var counter = 0

        binding.apply {
            tvDisplayCount.text = counter.toString()

            btnCount.setOnClickListener {
            	++counter
                tvDisplayCount.text = counter.toString()
       }
}


================== WITH ViewModel ===================
// This solves the above problem

    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2")

------------ Create a kotlin file for the activitie's viewmodel. ie MyViewModel (better name with relation to the activity, ie MainActivityViewModel -------------

class MyViewModel: ViewModel() {
//    The data (or model)
    private var counter = 0	// This is the data (ie model), but since it is not large, or from sources like a local or online db, hence why it can simply be here.


//    To read the data
    fun getInitialCounter(): Int {
        return counter
    }


//    To udate the data
    fun getUpdatedCounter(): Int {
        return ++counter
    }
}


------------ In MainActivity.kt ------------------

    private lateinit var binding: ActivityMainBinding
    private lateinit var myViewModel: MyViewModel


        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        myViewModel = ViewModelProvider(this).get(MyViewModel::class.java)

        binding.apply {
            tvDisplayCount.text = myViewModel.getInitialCounter().toString()

            btnCount.setOnClickListener {
                tvDisplayCount.text = myViewModel.getUpdatedCounter().toString()
            }
        }


------------- ViewModel Factory ----------------
The ViewModel factory is what allows us to customize the ViewModel. ie pass a value as an argument to the count variable. 
 - 1. Add the constructor for the parameters to be passed into the ViewModel class (ie MyViewModel) and initialize using the init block.

class MyViewModel(startingNum:Int): ViewModel() {
    private var counter = 0
    init {
        counter = startingNum
    }

 - 2. Create ViewModel factory class (ie MyViewModelFactory)

class MyViewModelFactory(private val startingNum:Int) : ViewModelProvider.Factory {

    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if(modelClass.isAssignableFrom(MyViewModel::class.java)){
            return MyViewModel(startingNum) as T
        }
        throw IllegalArgumentException("Unknown View Model Class")
    }
}

 - 3. In Main.kt -
    private lateinit var binding: ActivityMainBinding
    private lateinit var myViewModel: MyViewModel
    private lateinit var factory: MyViewModelFactory

        factory = MyViewModelFactory(52)        // Initial value will be 52
        myViewModel = ViewModelProvider(this,factory).get(MyViewModel::class.java)	//NB: the 'factory' after this.

        binding.apply {
            tvDisplayCount.text = myViewModel.getInitialCounter().toString()

            btnCount.setOnClickListener {
                tvDisplayCount.text = myViewModel.getUpdatedCounter().toString()
            }
        }





================================ LiveData ===================================

LiveData is lifecycle-aware observable data holder. As its name suggests, it is used to get live data, real-time updates from the data sources.

Using the code from the ViewModel sample above;
Modify the code for the textview (tv_count) to automatically update it's display value using LiveData.
Modify the ViewModel class, as well as the .kt file as shown to work with LiveData, without including the // lines

 ----------- Create a kotlin file for the activitie's viewmodel. ie MainActivityViewModel -------------

class MainActivityViewModel : ViewModel() {
//    var count = 0
    var count = MutableLiveData<Int>()

    init {
        count.value = 0
    }

    fun incrementCount(){
//        ++count
        count.value = (count.value)?.plus(1)
    }
}

------------ In MainActivity.kt ------------------

    private lateinit var tv_count: TextView;
    private lateinit var btn_count: Button;
    var count = 0

    private lateinit var viewModel: MainActivityViewModel

        setContentView(R.layout.activity_main)

        var tvCount = findViewById<TextView>(R.id.tvCount)
        var btnCount = findViewById<Button>(R.id.btnCount)

        viewModel = ViewModelProvider(this).get(MainActivityViewModel::class.java)
//        tvCount.text = viewModel.count.toString()
        
        viewModel.count.observe(this, Observer {
            tvCount.text = it.toString()
        })

        btnCount.setOnClickListener {
//            tvCount.setText("${count++}")
            viewModel.incrementCount()
//            tvCount.text = viewModel.count.toString()
        }





=========== ViewModel ====================
