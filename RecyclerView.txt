
NB: Use 'listitem' attribute for the recyclerView within the main layout to preview the recyclerview layout within the IDE

//FOR THIS METHOD, WE ARE PASSING LIST OF DATA TO BE DISPLAYED ON THE RECYCLERVIEW IN THE ADAPTER CLASS (Less efficient method I believe)
//CHECK RecyclerView2 TO LEARN HOW TO GET LIST OF DATA TO BE DISPLAYED ON THE RECYCLERVIEW BY USING A DATA CLASS (More efficient method I believe)


1. ============== Place RecyclerView on layout and give ID ie recyclerView ======================

2. ============== CREATE RECYCLERVIEW CUSTOM LAYOUT, ie recycler_layout (imageView1, tvText1) ==============
   Don't forget to change recyler_layout's parent layout(i.e contstraint) to wrap content.

3. ======================== In .kt =================================
        var recyclerView = findViewById<RecyclerView>(R.id.recyclerView)
        recyclerView.apply {
            layoutManager = LinearLayoutManager(this@MainActivity)
        }
-------------------------------- OR ----------------------------
        var recyclerView = findViewById<RecyclerView>(R.id.recyclerView)
        recyclerView.layoutManager = LinearLayoutManager(this)

4. =========== Create Kotlin class, RecyclerAdapter. si.e: =========================

	class RecyclerAdapter {
	}

5. =========================== DO AS SHOWN ===================================

	class RecyclerAdapter: RecyclerView.Adapter<>() {

	}

6. =========================== CREATE CLASS ViewHolder outside class RecyclerAdapter: ... =============================

class ViewHolder(val view: View): RecyclerView.ViewHolder(view){
    
}

7. ======================== WITHIN class RecyclerAdapter: ... =========================

class RecyclerAdapter: RecyclerView.Adapter<ViewHolder>(){

}

8. =========================== ALT + ENTER class RecyclerAdapter: and IMPLEMENT THE 3 MEMBERS ======================

class RecyclerAdapter: RecyclerView.Adapter<ViewHolder>(){
    
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        TODO("Not yet implemented")
    }

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        TODO("Not yet implemented")
    }

    override fun getItemCount(): Int {
        TODO("Not yet implemented")
    }
}

class ViewHolder(val view: View): RecyclerView.ViewHolder(view){

}

9. ========== WITHIN getItemCount(), FOR THIS INSTANCE, LET'S SPECIFY THE COUNT STATICALLY. ie 5: ============

    override fun getItemCount(): Int {
        return 5
    }

10. =============== WITHIN onCreateViewHolder(parent....) ================

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
    }
	TO:
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.recycler_layout, parent, false)
        return ViewHolder(view)
    }


11. ===== WITHIN class ViewHolder(val view: View): RecyclerView.ViewHolder(view){ ... =====

class ViewHolder(val view: View): RecyclerView.ViewHolder(view){
    var imageView1 = view.findViewById<ImageView>(R.id.imageView1)
    var tvText1 = view.findViewById<TextView>(R.id.tvText1)
}


12. ==== WITHIN override fun onBindViewHolder(holder: ViewHolder, position: Int) { ====
    //In this situation, the data is static, hence will be shown repeated on all generated views
    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        holder.tvText1.text = "This is a sample text"
        holder.imageView1.setImageResource(R.drawable.img2)
    }

13 ===== TO PASS DYNAMIC DATA TO 12 ====================
------------- At the top of the class, create the list of items to be displayed -----------
class RecyclerAdapter: RecyclerView.Adapter<ViewHolder>(){
    
    val textList = listOf<String>("Sample 1","Sample 2","Sample 3","Sample 4","Sample 5","Sample 6",
        "Sample 1","Sample 2","Sample 3","Sample 4","Sample 5","Sample 6")

    val imageList = listOf<Int>(R.drawable.img1, R.drawable.img2, R.drawable.img1, R.drawable.img2,
        R.drawable.img1, R.drawable.img2,R.drawable.img1, R.drawable.img2,R.drawable.img1, R.drawable.img2,
        R.drawable.img1, R.drawable.img2)


------------------------ ALSO --------------------------------
    override fun getItemCount(): Int {
        return textList.size
    }


---------------------- ALSO -----------------------

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        val textList1 = textList[position]
        val imageList1 = imageList[position]
        holder.tvText1.text = textList1
        holder.imageView1.setImageResource(imageList1)
    }



14. ========== IN .kt DO AS SHOWN ==============
        var recyclerView = findViewById<RecyclerView>(R.id.recyclerView)
        recyclerView.apply {
            layoutManager = LinearLayoutManager(this@MainActivity)
            adapter = RecyclerAdapter()
        }

